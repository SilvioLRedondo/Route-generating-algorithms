
def create_robots(num_robots, graph):
    """
    Crea una lista de robots ubicados en nodos aleatorios del grafo.
    """
    nodes = list(graph.nodes)
    robots = []
    
    for i in range(num_robots):
        start_node = random.choice(nodes)
        robot = {"id": i, "position": start_node, "target": None}
        robots.append(robot)
    
    return robots

def a_star_search(graph, start, goal):
    """Implementación del algoritmo A* para encontrar la ruta más corta."""
    queue = []
    heapq.heappush(queue, (0, start))
    came_from = {start: None}
    cost_so_far = {start: 0}
    
    while queue:
        _, current = heapq.heappop(queue)
        
        if current == goal:
            break
        
        for neighbor in graph.neighbors(current):
            new_cost = cost_so_far[current] + graph[current][neighbor]['weight']
            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                cost_so_far[neighbor] = new_cost
                priority = new_cost
                heapq.heappush(queue, (priority, neighbor))
                came_from[neighbor] = current
    
    path = []
    node = goal
    while node is not None:
        path.append(node)
        node = came_from.get(node)
    return path[::-1]

def simulate_robots(graph, robots, steps, method="A*"):
    """
    Simula el movimiento de los robots en el almacén con asignación de paquetes.
    """
    plt.ion()
    fig, ax = plt.subplots(figsize=(8, 6))
    pos = nx.spring_layout(graph, seed=42)

    for step in range(steps):
        ax.clear()
        nx.draw(graph, pos, with_labels=True, node_size=500, node_color="lightblue")

        # Generar paquetes en q1
        packages = ["q1"] * min(len(robots), random.randint(1, len(robots)))

        # Asignar paquetes a robots disponibles
        for robot in robots:
            if robot["target"] is None and packages:
                target = random.choice(list(graph.nodes))  # Ubicación aleatoria
                robot["target"] = target
                packages.pop()

        # Mover robots siguiendo A*
        for robot in robots:
            if robot["target"]:
                path = a_star_search(graph, robot["position"], robot["target"])
                if len(path) > 1:
                    robot["position"] = path[1]
                if robot["position"] == robot["target"]:
                    robot["target"] = None
        
        # Dibujar robots
        robot_positions = [pos[robot["position"]] for robot in robots]
        ax.scatter(*zip(*robot_positions), color="red", s=300, label="Robots")
        plt.legend()
        plt.pause(0.5)

    plt.ioff()
    plt.show()

if __name__ == "__main__":
    n, m, k, d = 3, 5, 12, 2
    num_robots = 3
    steps = 10
    graph = GraphGen(n, m, k, d)
    robots = create_robots(num_robots, graph)
    simulate_robots(graph, robots, steps)
