import networkx as nx
import matplotlib.pyplot as plt



    
def GraphGen(n, m, k):
    """
    Crea un grafo que representa un almacén con dimensiones n x m y k ubicaciones de almacenamiento.

    Entradas:
        n (int): Número de hileras (ancho del almacén).
        m (int): Largo del almacén (número máximo de ubicaciones por hilera).
        k (int): Número total de ubicaciones de almacenamiento.

    Salida:
        G (networkx.Graph): Grafo generado.
    """
    if k > n * m:
        raise ValueError("El número de ubicaciones k no puede exceder el espacio total disponible n * m.")

    G = nx.Graph()

    # Nodos de entrada y salida
    G.add_node("q1")  
    G.add_node("q2")  

    # Distribuir ubicaciones en las hileras
    ubicaciones_por_hilera = [k // n] * n
    for i in range(k % n):
        ubicaciones_por_hilera[i] += 1

    # Crear las ubicaciones y conectarlas
    nodo_id = 1  
    hileras = []

    for i in range(n):
        hilera = []
        for j in range(ubicaciones_por_hilera[i]):
            nodo = f"u{nodo_id}"
            G.add_node(nodo)
            hilera.append(nodo)
            nodo_id += 1
        hileras.append(hilera)

    # Conectar nodos dentro de las hileras
    for hilera in hileras:
        for i in range(len(hilera) - 1):
            G.add_edge(hilera[i], hilera[i + 1])

    # Conexión extremos de las hileras 
    for i in range(len(hileras) - 1):
        G.add_edge(hileras[i][0], hileras[i + 1][0])  # Entrada de hilera i con entrada de hilera i+1
        G.add_edge(hileras[i][-1], hileras[i + 1][-1])  # Salida de hilera i con salida de hilera i+1

    # Conectar entrada almacén con los nodos de entrada de las hileras más cercanas
    for hilera in hileras:
        G.add_edge("q1", hilera[0])

    # Conectar salida almacén con los nodos de salida de las hileras más cercanas
    for hilera in hileras:
        G.add_edge("q2", hilera[-1])

    return G


----------------------------------------------------------------------
Del archivo funciones, creo que es la misma función que la anterior, no lo he revisado

def GraphGen(n, m, k):
    """
    Genera un grafo que representa un almacén con dimensiones n x m y k ubicaciones de almacenamiento.

    Parámetros:
        n (int): Número de hileras (ancho del almacén).
        m (int): Largo del almacén (número máximo de ubicaciones por hilera).
        k (int): Número total de ubicaciones de almacenamiento.

    Retorna:
        G (networkx.Graph): Grafo generado.
    """
    if k > n * m:
        raise ValueError("El número de ubicaciones k no puede exceder el espacio total disponible n * m.")

    # Crear el grafo
    G = nx.Graph()

    # Añadir nodos de entrada y salida
    G.add_node("q1")  # Nodo de entrada
    G.add_node("q2")  # Nodo de salida

    # Distribuir ubicaciones en las hileras
    ubicaciones_por_hilera = [k // n] * n
    for i in range(k % n):
        ubicaciones_por_hilera[i] += 1

    # Crear las ubicaciones y conectarlas
    nodo_id = 1  # Identificador único para las ubicaciones
    hileras = []

    for i in range(n):
        hilera = []
        for j in range(ubicaciones_por_hilera[i]):
            nodo = f"u{nodo_id}"
            G.add_node(nodo)
            hilera.append(nodo)
            nodo_id += 1
        hileras.append(hilera)

    # Conectar nodos dentro de las hileras
    for hilera in hileras:
        for i in range(len(hilera) - 1):
            G.add_edge(hilera[i], hilera[i + 1])

    # Conectar extremos de las hileras con sus homólogos
    for i in range(len(hileras) - 1):
        G.add_edge(hileras[i][0], hileras[i + 1][0])  # Entrada de hilera i con entrada de hilera i+1
        G.add_edge(hileras[i][-1], hileras[i + 1][-1])  # Salida de hilera i con salida de hilera i+1

    # Conectar q1 con los nodos de entrada de las hileras más cercanas
    for hilera in hileras:
        G.add_edge("q1", hilera[0])

    # Conectar q2 con los nodos de salida de las hileras más cercanas
    for hilera in hileras:
        G.add_edge("q2", hilera[-1])

    return G

-----------------------
main anterior:

for u, v, data in graph.edges(data=True):
        if 'weight' not in data:
            print(f"Missing weight: ({u}, {v})")

grafo = funTFG.GraphGen(5, 9, 45, 2)


    plt.figure(figsize=(10, 6))
    pos = nx.spring_layout(grafo)  # Posiciones de los nodos
    nx.draw(grafo, pos, with_labels=True, node_color="lightblue", node_size=500, font_size=10, font_weight="bold")
    plt.title("Representación del Grafo del Almacén")
    plt.show()
    
----------------------
Simulate robots aleatorio:

def simulate_robots(graph, robots, steps):
    """
    Simula el movimiento de los robots en el almacén.
    
    Cada robot se mueve aleatoriamente a un nodo vecino en cada paso.
    """
    plt.ion()  # Modo interactivo de matplotlib
    fig, ax = plt.subplots(figsize=(8, 6))
    pos = nx.spring_layout(graph, seed=42)

    for step in range(steps):
        ax.clear()
        nx.draw(graph, pos, with_labels=True, node_size=500, node_color="lightblue")

        # Mover los robots a un nodo vecino aleatorio
        for robot in robots:
            neighbors = list(graph.neighbors(robot["position"]))
            if neighbors:
                robot["position"] = random.choice(neighbors)

        # Dibujar robots
        robot_positions = [pos[robot["position"]] for robot in robots]
        ax.scatter(*zip(*robot_positions), color="red", s=750, label="Robots")

        plt.legend()
        plt.pause(0.5)  # Esperar medio segundo entre cada actualización

    plt.ioff()  # Desactivar modo interactivo
    plt.show()


------------------------------------
def simulate_robots(graph, robots, steps, method="A*"):
    """
    Simula el movimiento de los robots en el almacén con asignación de paquetes.
    """
    plt.ion()
    fig, ax = plt.subplots(figsize=(16, 12))
    pos = nx.get_node_attributes(graph, 'posicion')
    # pos = nx.spring_layout(graph, seed=42)

    for step in range(steps):
        ax.clear()
        nx.draw(graph, pos, with_labels=True, node_size=350, node_color="lightblue")

        # Generar paquetes en q1
        packages = ["q1"] * min(len(robots), random.randint(1, len(robots)))

        # Asignar paquetes a robots disponibles
        for robot in robots:
            if robot["target"] is None and packages:
                target = random.choice(list(graph.nodes))  # Ubicación aleatoria
                robot["target"] = target
                packages.pop()

        # Mover robots siguiendo A*
        for robot in robots:
            if robot["target"]:
                path = a_star_search(graph, robot["position"], robot["target"])
                if len(path) > 1:
                    robot["position"] = path[1]
                if robot["position"] == robot["target"]:
                    robot["target"] = None
        

        # Dibujar robots
        robot_positions = [pos[robot["position"]] for robot in robots]
        ax.scatter(*zip(*robot_positions), color="red", s=750, label="Robots")
        plt.legend()
        plt.pause(0.5)

    plt.ioff()
    plt.show()


-------------Desechado a día: 06/04/22025----------------


class Robot1:
    def __init__(self, id, position):
        """
        Constructor del robot.
        """
        self.id = id
        self.position = position  # Nodo discreto
        self.target = None
        self.distance = 0
        self.capacidad_carga = 0
        self.autonomia = 100
        self.disponible = True
        # Atributos para la simulación continua:
        self.continuous_position = None  # Posición continua (tuple)
        self.path = []  # Trayectoria (lista de nodos)
        self.current_edge_index = 0  # Índice del segmento actual
        self.progress_along_edge = 0.0  # Progreso (distancia recorrida en el segmento actual)

    def set_target(self, target):
        self.target = target

    def mover(self, nueva_posicion):
        self.position = nueva_posicion

    def __repr__(self):
        return f"Robot {self.id}"

class Nodo1:
    def __init__(self, nombre, posicion, peso=None, altura=None, estante=None):
        """
        Constructor del nodo.
        """
        self.nombre = nombre
        self.posicion = posicion
        self.peso = peso # Capacidad
        self.altura = altura
        self.estante = estante # Objeto que contenga

    def __hash__(self):
        return hash(self.nombre)
    
    def __eq__(self, other):
        return isinstance(other, Nodo) and self.nombre == other.nombre
    
    def __repr__(self):
        return self.nombre

    def __lt__(self, other):
        return self.nombre < other.nombre
    
    def get_posicion(self):
        return self.posicion

    def get_estante(self):
        return self.estante
---------


def simulate_robots_continuous(graph, robots, total_time, dt=0.1, speed=1):
    """
    Calcula la simulación en dominio continuo, almacenando un snapshot del estado (posición continua de cada robot)
    en cada intervalo dt.
    """
    simulation_data = []
    current_time = 0.0

    # Inicializar la posición continua de cada robot
    for robot in robots:
        robot.continuous_position = robot.position.posicion
        robot.path = []
        robot.current_edge_index = 0
        robot.progress_along_edge = 0.0

    while current_time < total_time:
        # Asignar destino a robots sin target
        for robot in robots:
            if robot.target is None:
                target = random.choice(list(graph.nodes()))
                robot.set_target(target)
                robot.path = a_star_search(graph, robot.position, robot.target)
                robot.current_edge_index = 0
                robot.progress_along_edge = 0.0

        # Actualizar la posición continua para cada robot
        for robot in robots:
            if robot.target and robot.path and robot.current_edge_index < len(robot.path) - 1:
                start_node = robot.path[robot.current_edge_index]
                end_node = robot.path[robot.current_edge_index + 1]
                start_pos = start_node.posicion
                end_pos = end_node.posicion
                dx = end_pos[0] - start_pos[0]
                dy = end_pos[1] - start_pos[1]
                segment_distance = math.sqrt(dx**2 + dy**2)
                distance_to_move = speed * dt
                remaining_distance = segment_distance - robot.progress_along_edge
                if distance_to_move < remaining_distance:
                    robot.progress_along_edge += distance_to_move
                    alpha = robot.progress_along_edge / segment_distance
                    new_x = start_pos[0] + alpha * dx
                    new_y = start_pos[1] + alpha * dy
                    robot.continuous_position = (new_x, new_y)
                else:
                    # Completa el segmento actual
                    robot.position = end_node  # Actualización discreta del nodo
                    robot.continuous_position = end_node.posicion
                    robot.current_edge_index += 1
                    robot.progress_along_edge = 0.0
                    if robot.current_edge_index >= len(robot.path) - 1:
                        robot.target = None
                        robot.path = []
                        robot.current_edge_index = 0
        # Guardar snapshot del estado actual
        snapshot = {robot.id: robot.continuous_position for robot in robots}
        # snapshot = [robot.continuous_position for robot in robots] #--------------------------------
        simulation_data.append(snapshot)
        current_time += dt

    return simulation_data


def playback_simulation(graph, simulation_data, dt=0.1):
    """
    Reproduce la simulación a partir de los snapshots calculados.
    """
    plt.ion()
    fig, ax = plt.subplots(figsize=(16, 12))
    pos = {node: node.posicion for node in graph.nodes()}
    
    for snapshot in simulation_data:
        ax.clear()
        nx.draw(graph, pos, with_labels=True, node_size=350, node_color="lightblue")
        robot_positions = list(snapshot.values())
        ax.scatter(*zip(*robot_positions), color="red", s=750, label="Robots")
        ax.legend(loc="upper left", fontsize=12, frameon=True)
        plt.pause(dt)
    
    plt.ioff()
    plt.show()

def simulate_robots_continuous1(graph, robots, total_time, dt=0.1, speed=1):
    simulation_data = []
    paquetes_visuales = []
    current_time = 0.0

    # Encontrar nodo q1 y q2
    nodo_q1 = next(node for node in graph.nodes if node.nombre == "q1")
    nodo_q2 = next(node for node in graph.nodes if node.nombre == "q2")

    # Inicialmente, 5 paquetes visualmente creados en q1
    paquetes_generados = [Paquete(posicion=nodo_q1.posicion) for _ in range(5)]
    paquetes_visuales.extend(paquetes_generados)

    # Inicialización correcta de robots
    for robot in robots:
        robot.continuous_position = robot.position.posicion
        robot.paquete_actual = None
        robot.target = None
        robot.path = []
        robot.current_edge_index = 0
        robot.progress_along_edge = 0.0

    while current_time < total_time:
        for robot in robots:
            # Caso 1: Robot sin tarea (sin paquete, sin objetivo)
            if robot.target is None and robot.paquete_actual is None:
                if paquetes_generados:
                    robot.target = nodo_q1
                    robot.path = a_star_search(graph, robot.position, nodo_q1)
                    robot.current_edge_index = 0
                    robot.progress_along_edge = 0.0

            # Caso 2: Robot en q1, recogiendo paquete
            if robot.position == nodo_q1 and robot.paquete_actual is None:
                if paquetes_generados:
                    robot.paquete_actual = paquetes_generados.pop(0)
                    # Elegir destino (estante con espacio disponible)
                    estantes_validos = [node for node in graph.nodes if node.estante and node.get_cantidad() < 10]
                    if estantes_validos:
                        robot.target = random.choice(estantes_validos)
                        robot.path = a_star_search(graph, robot.position, robot.target)
                        robot.current_edge_index = 0
                        robot.progress_along_edge = 0.0

            # Caso 3: Robot en estante, dejando paquete
            if robot.paquete_actual and robot.position == robot.target and robot.target != nodo_q1:
                robot.position.añadir_paquete(robot.paquete_actual)
                paquetes_visuales.remove(robot.paquete_actual)
                robot.paquete_actual = None
                robot.target = None

            # Movimiento continuo del robot
            if robot.path and robot.current_edge_index < len(robot.path) - 1:
                start_node = robot.path[robot.current_edge_index]
                end_node = robot.path[robot.current_edge_index + 1]
                dx, dy = end_node.posicion[0] - start_node.posicion[0], end_node.posicion[1] - start_node.posicion[1]
                segment_distance = math.hypot(dx, dy)
                move_distance = speed * dt
                remaining_distance = segment_distance - robot.progress_along_edge

                if move_distance < remaining_distance:
                    robot.progress_along_edge += move_distance
                    alpha = robot.progress_along_edge / segment_distance
                    new_pos = (start_node.posicion[0] + alpha * dx,
                               start_node.posicion[1] + alpha * dy)
                    robot.continuous_position = new_pos
                else:
                    # Completar movimiento hacia el nodo siguiente
                    robot.position = end_node
                    robot.continuous_position = end_node.posicion
                    robot.current_edge_index += 1
                    robot.progress_along_edge = 0.0

            # Movimiento visual del paquete con robot
            if robot.paquete_actual:
                robot.paquete_actual.posicion = robot.continuous_position

        # Snapshot visual actualizado
        snapshot = {
            'robots': {robot.id: robot.continuous_position for robot in robots},
            'paquetes': [paquete.posicion for paquete in paquetes_visuales]
        }
        simulation_data.append(snapshot)
        current_time += dt

    return simulation_data


def playback_simulation1(graph, simulation_data, dt=0.1):
    plt.ion()
    fig, ax = plt.subplots(figsize=(16, 12))
    pos = {node: node.posicion for node in graph.nodes()}
    
    for snapshot in simulation_data:
        ax.clear()
        nx.draw(graph, pos, with_labels=True, node_size=400, node_color="lightgray", ax=ax)

        # Dibujar robots
        robot_positions = list(snapshot['robots'].values())
        ax.scatter(*zip(*robot_positions), color="red", s=750, label="Robots")

        # Dibujar paquetes
        paquete_positions = snapshot['paquetes']
        if paquete_positions:
            ax.scatter(*zip(*paquete_positions), color="blue", s=500, label="Paquetes")

        ax.legend(loc="upper left", fontsize=12, frameon=True)
        plt.pause(dt)
    
    plt.ioff()
    plt.show()


----------08/04/2024-----------


def simulate_robots_continuous1(graph, robots, total_time, dt=0.1, speed=1):
    simulation_data = []
    paquetes_visuales = []
    current_time = 0.0
    max_occupation_array = []

    nodo_q1 = next(node for node in graph.nodes if node.nombre == "q1")
    nodo_q2 = next(node for node in graph.nodes if node.nombre == "q2")

    paquetes_generados = [Paquete(posicion=nodo_q1.posicion) for _ in range(5)]
    paquetes_visuales.extend(paquetes_generados)

    # Inicialización ajustada en simulate_robots_continuous
    for robot in robots:
        robot.continuous_position = robot.position.posicion
        robot.paquete_actual = None
        robot.target = None
        robot.estado = 'espera'  # claramente definido el estado inicial
        robot.destino_final = None
        robot.path = []
        robot.current_edge_index = 0
        robot.progress_along_edge = 0.0
    
    # Crear objeto gestor de paquetes
    gestor_paquetes = GestionPaquetes()

    # Prueba inicial de recepción (crear paquetes)
    for _ in range(3):
        gestor_paquetes.recepcion()

    # Prueba inicial de emisión (solicitar paquetes del almacén)
    estantes = [node for node in graph.nodes if node.estante]
    for _ in range(3):
        gestor_paquetes.emision(estantes)

    # Comprobar las colas:
    print("\nPaquetes en cola de recepción (q1):")
    for paquete in gestor_paquetes.cola_recepcion:
        print("-", paquete.producto)

    print("\nPaquetes en cola de emisión (desde estantes):")
    for paquete, estante in gestor_paquetes.cola_emision:
        print(f"- {paquete.producto} (desde estante {estante.nombre})")

    # Definir nodos q1 y q2 del grafo
    nodo_q1 = next(node for node in graph.nodes if node.nombre == "q1")
    nodo_q2 = next(node for node in graph.nodes if node.nombre == "q2")

    # Crear objeto gestor de robots
    gestor_robots = GestionRobots(robots, nodo_q1, nodo_q2, graph)

    # Ejemplo inicial de asignación
    gestor_robots.asignar_tareas(gestor_paquetes)

    # Comprobar visualmente (o mediante prints)
    for robot in robots:
        print(f"Robot {robot.id} estado: {robot.estado}, target: {robot.target}")

    while current_time < total_time:
        for u, v, data in graph.edges(data=True):
            data["objeto_arista"].ocupacion = 0

        for robot in robots:
            # Caso A: Robot sin paquete ni tarea asignada
            if robot.paquete_actual is None and robot.target is None:
                # Prioridad: primero sacar paquete de estante a q2
                estantes_con_paquetes = [node for node in graph.nodes if node.estante and node.get_cantidad() > 0]
                if estantes_con_paquetes:
                    robot.target = random.choice(estantes_con_paquetes)
                elif paquetes_generados:  # Sino, ir a recoger paquetes nuevos en q1
                    robot.target = nodo_q1

                if robot.target:
                    robot.path = a_star_search(graph, robot.position, robot.target)
                    robot.current_edge_index = 0
                    robot.progress_along_edge = 0.0

            # Caso B: Robot recogiendo paquete desde q1 o estante
            if robot.paquete_actual is None and robot.position == robot.target:
                if robot.position == nodo_q1 and paquetes_generados:
                    robot.paquete_actual = paquetes_generados.pop(0)
                    destinos_posibles = [node for node in graph.nodes if node.estante and node.get_cantidad() < 10]
                    if destinos_posibles:
                        robot.target = random.choice(destinos_posibles)
                        robot.path = a_star_search(graph, robot.position, robot.target)
                        robot.current_edge_index = 0
                        robot.progress_along_edge = 0.0
                elif robot.position.estante and robot.position.get_cantidad() > 0:
                    robot.paquete_actual = robot.position.retirar_paquete()
                    paquetes_visuales.append(robot.paquete_actual)
                    robot.target = nodo_q2
                    robot.path = a_star_search(graph, robot.position, nodo_q2)
                    robot.current_edge_index = 0
                    robot.progress_along_edge = 0.0

            # Caso C: Robot depositando paquete en estante o en q2
            if robot.paquete_actual and robot.position == robot.target:
                if robot.target == nodo_q2:
                    paquetes_visuales.remove(robot.paquete_actual)
                elif robot.position.estante and robot.position.get_cantidad() > 0:
                    robot.paquete_actual = robot.position.retirar_paquete()
                    robot.paquete_actual.posicion = robot.continuous_position
                    paquetes_visuales.append(robot.paquete_actual)  # Añadir visualmente el paquete aquí (clave)
                    robot.target = nodo_q2
                    robot.path = a_star_search(graph, robot.position, nodo_q2)
                    robot.current_edge_index = 0
                    robot.progress_along_edge = 0.0
                else:
                    robot.position.añadir_paquete(robot.paquete_actual)
                    paquetes_visuales.remove(robot.paquete_actual)
                
                robot.paquete_actual = None
                robot.target = None
                

            # Movimiento continuo
            if robot.path and robot.current_edge_index < len(robot.path) - 1:
                start_node = robot.path[robot.current_edge_index]
                end_node = robot.path[robot.current_edge_index + 1]
                dx, dy = end_node.posicion[0] - start_node.posicion[0], end_node.posicion[1] - start_node.posicion[1]
                segment_distance = math.hypot(dx, dy)
                move_distance = speed * dt
                remaining_distance = segment_distance - robot.progress_along_edge

                if move_distance < remaining_distance:
                    robot.progress_along_edge += move_distance
                    alpha = robot.progress_along_edge / segment_distance
                    new_pos = (start_node.posicion[0] + alpha * dx,
                               start_node.posicion[1] + alpha * dy)
                    robot.continuous_position = new_pos
                else:
                    robot.position = end_node
                    robot.continuous_position = end_node.posicion
                    robot.current_edge_index += 1
                    robot.progress_along_edge = 0.0

            if robot.paquete_actual:
                robot.paquete_actual.posicion = robot.continuous_position

        for robot in robots:
            # Revisa si el robot no ha llegado al último nodo de su path
            if robot.path and robot.current_edge_index < (len(robot.path) - 1):
                start_node = robot.path[robot.current_edge_index]
                end_node = robot.path[robot.current_edge_index + 1]
                # Ubica la arista en el grafo y suma 1
                arista = graph[start_node][end_node]["objeto_arista"]
                arista.ocupacion += 1

        max_occupancy = 0
        for _, _, data in graph.edges(data=True):
            if data["objeto_arista"].ocupacion > max_occupancy:
                max_occupancy = data["objeto_arista"].ocupacion

        max_occupation_array.append(max_occupancy)

        # Estado visual de almacenamiento (Estantes)
        estado_almacenamiento = {}
        for node in graph.nodes:
            if node.estante:
                cantidad = node.get_cantidad()
                estado_almacenamiento[node.nombre] = (node.posicion, cantidad)

        snapshot = {
            'robots': {robot.id: robot.continuous_position for robot in robots},
            'paquetes': [paquete.posicion for paquete in paquetes_visuales],
            'almacenamiento': estado_almacenamiento
        }

        simulation_data.append(snapshot)
        current_time += dt

    return simulation_data,max_occupation_array


----------10/04/2025--------------

    def asignar_tareasq(self, gestor_paquetes):

        for robot in self.robots:
            if robot.estado == 'espera' or robot.target is None:
                # Prioridad máxima: sacar paquetes del almacén (emisión)
                emision = gestor_paquetes.obtener_proximo_emision()
                if emision:
                    paquete, estante_origen = emision
                    robot.paquete_actual = paquete
                    self.buscar(robot, estante_origen)
                    robot.destino_final = self.nodo_q2
                    continue  # Mantener este continue

                # Segunda prioridad: almacenar paquetes entrantes (recepción)
                recepcion = gestor_paquetes.obtener_proximo_recepcion()
                if recepcion:
                    destino = self.estante_mas_libre(recepcion.producto)
                    if destino:
                        robot.paquete_actual = recepcion
                        self.recogida(robot)
                        robot.destino_final = destino
                        continue  
                    else:
                        # Si no hay destino compatible, devolver paquete a la cola
                        # print("[AVISO] No hay estantes compatibles disponibles. Paquete devuelto a cola.")
                        gestor_paquetes.cola_recepcion.insert(0, recepcion)

                # Por defecto, espera si no hay tareas
                self.espera(robot)
